{
    "name": "Recipe Generator Workflow (Corrected)",
    "nodes": [
        {
            "parameters": {
                "httpMethod": "POST",
                "path": "recipe-generator",
                "options": {
                    "responseCode": 200,
                    "responseMode": "onReceived"
                }
            },
            "id": "7df5b5c2-f895-497c-97ed-9b7c6318be8a",
            "name": "Webhook Trigger",
            "type": "n8n-nodes-base.webhook",
            "typeVersion": 1,
            "position": [
                -576,
                -32
            ],
            "webhookId": "611fd657-633c-4445-aa54-0122655c09cd"
        },
        {
            "parameters": {
                "functionCode": "// Extract ingredients from the webhook payload\nconst ingredients = $json.ingredients || [];\n\n// Create a prompt for recipe generation\nconst prompt = `Generate a detailed recipe based on these ingredients: ${ingredients.join(', ')}.\n\nPlease provide:\n- A creative recipe title\n- A list of ingredients with quantities\n- Step-by-step cooking instructions\n- Prep time and cook time\n\nFormat the response as a JSON object with this exact structure:\n{\n  \"title\": \"Recipe Title\",\n  \"ingredients\": [\"ingredient 1\", \"ingredient 2\"],\n  \"instructions\": [\"Step 1\", \"Step 2\"],\n  \"prepTime\": \"10 minutes\",\n  \"cookTime\": \"25 minutes\"\n}\n\nMake sure the recipe is practical and uses the provided ingredients.`;\n\nreturn {\n  prompt: prompt,\n  ingredients: ingredients\n};"
            },
            "id": "99eaad23-e90b-4d1f-a63d-c26d68b26da1",
            "name": "Set Prompt",
            "type": "n8n-nodes-base.function",
            "typeVersion": 1,
            "position": [
                -352,
                -32
            ]
        },
        {
            "parameters": {
                "method": "POST",
                "url": "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro:generateContent",
                "authentication": "queryAuth",
                "sendBody": true,
                "bodyParameters": {
                    "parameters": [
                        {
                            "name": "contents",
                            "value": "=[{\"parts\": [{\"text\": {{ $node[\"Set Prompt\"].json.prompt }} }]}]"
                        },
                        {
                            "name": "generationConfig",
                            "value": "{\"temperature\": 0.7, \"maxOutputTokens\": 1000}"
                        }
                    ]
                },
                "options": {
                    "headers": {
                        "headerParameters": [
                            {
                                "name": "Content-Type",
                                "value": "application/json"
                            }
                        ]
                    }
                }
            },
            "id": "7dbd4578-0874-4237-a21e-1722efb2a9fa",
            "name": "Gemini API",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
                -112,
                -32
            ],
            "credentials": {
                "httpQueryAuth": {
                    "id": "aVjR3WoRWZme5cqA",
                    "name": "Query Auth account"
                }
            }
        },
        {
            "parameters": {
                "functionCode": "try {\n  // Extract the text content from Gemini response\n  let content = $json.candidates[0].content.parts[0].text;\n  \n  // Clean up the response - remove markdown code blocks if present\n  content = content.replace(/```json\\n?|\\n?```/g, '').trim();\n  \n  // Parse the JSON response\n  const recipe = JSON.parse(content);\n  \n  // Validate the required fields\n  if (!recipe.title || !recipe.ingredients || !recipe.instructions) {\n    throw new Error('Missing required fields in recipe response');\n  }\n  \n  // Ensure ingredients and instructions are arrays\n  if (!Array.isArray(recipe.ingredients)) {\n    recipe.ingredients = [recipe.ingredients];\n  }\n  \n  if (!Array.isArray(recipe.instructions)) {\n    recipe.instructions = [recipe.instructions];\n  }\n  \n  // Set default times if not provided\n  if (!recipe.prepTime) recipe.prepTime = \"10 minutes\";\n  if (!recipe.cookTime) recipe.cookTime = \"20 minutes\";\n  \n  return { json: recipe };\n} catch (error) {\n  // Return a fallback recipe if parsing fails\n  console.error('Error parsing recipe:', error);\n  return {\n    json: {\n      title: \"Simple Recipe\",\n      ingredients: $node[\"Set Prompt\"].json.ingredients,\n      instructions: [\"Mix all ingredients together\", \"Cook until done\"],\n      prepTime: \"10 minutes\",\n      cookTime: \"20 minutes\"\n    }\n  };\n}"
            },
            "id": "0427a0b8-a12a-40fd-90e9-35eb54161f82",
            "name": "Parse Recipe",
            "type": "n8n-nodes-base.function",
            "typeVersion": 1,
            "position": [
                288,
                -32
            ]
        },
        {
            "parameters": {
                "respondWith": "={{ $node[\"Parse Recipe\"].json.json }}",
                "options": {
                    "responseCode": 200
                }
            },
            "id": "0b428b2e-f89c-4dbe-a64f-d5138579707e",
            "name": "Webhook Response",
            "type": "n8n-nodes-base.webhook",
            "typeVersion": 1,
            "position": [
                496,
                -32
            ],
            "webhookId": "611fd657-633c-4445-aa54-0122655c09cd"
        }
    ],
    "connections": {
        "Webhook Trigger": {
            "main": [
                [
                    {
                        "node": "Set Prompt",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        },
        "Set Prompt": {
            "main": [
                [
                    {
                        "node": "Gemini API",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        },
        "Gemini API": {
            "main": [
                [
                    {
                        "node": "Parse Recipe",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        },
        "Parse Recipe": {
            "main": [
                [
                    {
                        "node": "Webhook Response",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        }
    },
    "active": true,
    "settings": {
        "executionOrder": "v1"
    },
    "id": "XWd3xkBMEr7kQx9w",
    "meta": {
        "templateCredsSetupCompleted": true,
        "instanceId": "2a7812e240aeed64f14b9e4e25df9f375487b6a27420732a077cdcbb0438d7a1"
    },
    "tags": []
}